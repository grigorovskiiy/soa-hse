name: soa

networks:
  soa-network:
    driver: bridge

volumes:
  users_postgres_data:
  posts_postgres_data:
  clickhouse_data:
  clickhouse_log:

services:
  users-postgres:
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "users_db"
      POSTGRES_USER: "username"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - users_postgres_data:/var/lib/postgresql/data
    networks:
      - soa-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username -d users_db" ]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"


  posts-postgres:
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: "posts_db"
      POSTGRES_USER: "username"
      POSTGRES_PASSWORD: "password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - posts_postgres_data:/var/lib/postgresql/data
    networks:
      - soa-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U username -d posts_db" ]
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5433:5432"

  api-gateway-service:
    build:
      context: .
      dockerfile: api_gateway_service/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - soa-network

  users-service:
    build:
      context: .
      dockerfile: users_service/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - soa-network
    depends_on:
      users-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  posts-service:
    build:
      context: .
      dockerfile: posts_service/Dockerfile
    ports:
      - "50051:50051"
    networks:
      - soa-network
    depends_on:
      posts-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  statistic-service:
    build:
      context: .
      dockerfile: statistic_service/Dockerfile
    ports:
      - "50052:50052"
    networks:
      - soa-network
    depends_on:
      clickhouse:
        condition: service_healthy


  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - soa-network

  kafka:
    image: confluentinc/cp-kafka:7.1.2
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://kafka:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - soa-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.1.2
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - soa-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_log:/var/log/clickhouse-server
    environment:
      - CLICKHOUSE_DB=clickhouse_db
      - CLICKHOUSE_USER=username
      - CLICKHOUSE_PASSWORD=password
    networks:
      - soa-network
    depends_on:
      kafka:
        condition: service_healthy

    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:8123/ping || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10





