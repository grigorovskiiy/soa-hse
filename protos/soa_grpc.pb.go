// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/soa.proto

package protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsServiceClient is the client API for PostsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsServiceClient interface {
	CreatePost(ctx context.Context, in *PostDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeletePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*PostDataResponse, error)
	GetPostList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PostLike(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error)
	PostView(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCommentList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}

type postsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsServiceClient(cc grpc.ClientConnInterface) PostsServiceClient {
	return &postsServiceClient{cc}
}

func (c *postsServiceClient) CreatePost(ctx context.Context, in *PostDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) DeletePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*PostDataResponse, error) {
	out := new(PostDataResponse)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetPostList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	out := new(ListPostsResponse)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/GetPostList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/PostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) PostLike(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/PostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) PostView(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/PostView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetCommentList(ctx context.Context, in *PaginatedListRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/posts_service.PostsService/GetCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServiceServer is the server API for PostsService service.
// All implementations must embed UnimplementedPostsServiceServer
// for forward compatibility
type PostsServiceServer interface {
	CreatePost(context.Context, *PostDataRequest) (*empty.Empty, error)
	DeletePost(context.Context, *PostID) (*empty.Empty, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*empty.Empty, error)
	GetPost(context.Context, *PostID) (*PostDataResponse, error)
	GetPostList(context.Context, *PaginatedListRequest) (*ListPostsResponse, error)
	PostComment(context.Context, *PostCommentRequest) (*empty.Empty, error)
	PostLike(context.Context, *PostID) (*empty.Empty, error)
	PostView(context.Context, *PostID) (*empty.Empty, error)
	GetCommentList(context.Context, *PaginatedListRequest) (*ListCommentsResponse, error)
	mustEmbedUnimplementedPostsServiceServer()
}

// UnimplementedPostsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServiceServer struct {
}

func (UnimplementedPostsServiceServer) CreatePost(context.Context, *PostDataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsServiceServer) DeletePost(context.Context, *PostID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostsServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsServiceServer) GetPost(context.Context, *PostID) (*PostDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostsServiceServer) GetPostList(context.Context, *PaginatedListRequest) (*ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostList not implemented")
}
func (UnimplementedPostsServiceServer) PostComment(context.Context, *PostCommentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedPostsServiceServer) PostLike(context.Context, *PostID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLike not implemented")
}
func (UnimplementedPostsServiceServer) PostView(context.Context, *PostID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostView not implemented")
}
func (UnimplementedPostsServiceServer) GetCommentList(context.Context, *PaginatedListRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedPostsServiceServer) mustEmbedUnimplementedPostsServiceServer() {}

// UnsafePostsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServiceServer will
// result in compilation errors.
type UnsafePostsServiceServer interface {
	mustEmbedUnimplementedPostsServiceServer()
}

func RegisterPostsServiceServer(s grpc.ServiceRegistrar, srv PostsServiceServer) {
	s.RegisterService(&PostsService_ServiceDesc, srv)
}

func _PostsService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).CreatePost(ctx, req.(*PostDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).DeletePost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetPost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/GetPostList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetPostList(ctx, req.(*PaginatedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/PostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_PostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).PostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/PostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).PostLike(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_PostView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).PostView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/PostView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).PostView(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.PostsService/GetCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetCommentList(ctx, req.(*PaginatedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsService_ServiceDesc is the grpc.ServiceDesc for PostsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts_service.PostsService",
	HandlerType: (*PostsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostsService_CreatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostsService_DeletePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostsService_UpdatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostsService_GetPost_Handler,
		},
		{
			MethodName: "GetPostList",
			Handler:    _PostsService_GetPostList_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _PostsService_PostComment_Handler,
		},
		{
			MethodName: "PostLike",
			Handler:    _PostsService_PostLike_Handler,
		},
		{
			MethodName: "PostView",
			Handler:    _PostsService_PostView_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _PostsService_GetCommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/soa.proto",
}

// StatisticServiceClient is the client API for StatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServiceClient interface {
	GetViewsCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error)
	GetCommentsCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error)
	GetLikesCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error)
	GetViewsDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error)
	GetCommentsDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error)
	GetLikesDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error)
	GetTopTenPosts(ctx context.Context, in *TopTenParameter, opts ...grpc.CallOption) (*TopTenPostsResponse, error)
	GetTopTenUsers(ctx context.Context, in *TopTenParameter, opts ...grpc.CallOption) (*TopTenUsersResponse, error)
}

type statisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServiceClient(cc grpc.ClientConnInterface) StatisticServiceClient {
	return &statisticServiceClient{cc}
}

func (c *statisticServiceClient) GetViewsCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetViewsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetCommentsCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetCommentsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetLikesCount(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetLikesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetViewsDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error) {
	out := new(DynamicListResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetViewsDynamic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetCommentsDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error) {
	out := new(DynamicListResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetCommentsDynamic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetLikesDynamic(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*DynamicListResponse, error) {
	out := new(DynamicListResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetLikesDynamic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetTopTenPosts(ctx context.Context, in *TopTenParameter, opts ...grpc.CallOption) (*TopTenPostsResponse, error) {
	out := new(TopTenPostsResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetTopTenPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetTopTenUsers(ctx context.Context, in *TopTenParameter, opts ...grpc.CallOption) (*TopTenUsersResponse, error) {
	out := new(TopTenUsersResponse)
	err := c.cc.Invoke(ctx, "/posts_service.StatisticService/GetTopTenUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServiceServer is the server API for StatisticService service.
// All implementations must embed UnimplementedStatisticServiceServer
// for forward compatibility
type StatisticServiceServer interface {
	GetViewsCount(context.Context, *PostID) (*CountResponse, error)
	GetCommentsCount(context.Context, *PostID) (*CountResponse, error)
	GetLikesCount(context.Context, *PostID) (*CountResponse, error)
	GetViewsDynamic(context.Context, *PostID) (*DynamicListResponse, error)
	GetCommentsDynamic(context.Context, *PostID) (*DynamicListResponse, error)
	GetLikesDynamic(context.Context, *PostID) (*DynamicListResponse, error)
	GetTopTenPosts(context.Context, *TopTenParameter) (*TopTenPostsResponse, error)
	GetTopTenUsers(context.Context, *TopTenParameter) (*TopTenUsersResponse, error)
	mustEmbedUnimplementedStatisticServiceServer()
}

// UnimplementedStatisticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticServiceServer struct {
}

func (UnimplementedStatisticServiceServer) GetViewsCount(context.Context, *PostID) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsCount not implemented")
}
func (UnimplementedStatisticServiceServer) GetCommentsCount(context.Context, *PostID) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsCount not implemented")
}
func (UnimplementedStatisticServiceServer) GetLikesCount(context.Context, *PostID) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesCount not implemented")
}
func (UnimplementedStatisticServiceServer) GetViewsDynamic(context.Context, *PostID) (*DynamicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewsDynamic not implemented")
}
func (UnimplementedStatisticServiceServer) GetCommentsDynamic(context.Context, *PostID) (*DynamicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsDynamic not implemented")
}
func (UnimplementedStatisticServiceServer) GetLikesDynamic(context.Context, *PostID) (*DynamicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikesDynamic not implemented")
}
func (UnimplementedStatisticServiceServer) GetTopTenPosts(context.Context, *TopTenParameter) (*TopTenPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTenPosts not implemented")
}
func (UnimplementedStatisticServiceServer) GetTopTenUsers(context.Context, *TopTenParameter) (*TopTenUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTenUsers not implemented")
}
func (UnimplementedStatisticServiceServer) mustEmbedUnimplementedStatisticServiceServer() {}

// UnsafeStatisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServiceServer will
// result in compilation errors.
type UnsafeStatisticServiceServer interface {
	mustEmbedUnimplementedStatisticServiceServer()
}

func RegisterStatisticServiceServer(s grpc.ServiceRegistrar, srv StatisticServiceServer) {
	s.RegisterService(&StatisticService_ServiceDesc, srv)
}

func _StatisticService_GetViewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetViewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetViewsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetViewsCount(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetCommentsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetCommentsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetCommentsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetCommentsCount(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetLikesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetLikesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetLikesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetLikesCount(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetViewsDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetViewsDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetViewsDynamic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetViewsDynamic(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetCommentsDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetCommentsDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetCommentsDynamic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetCommentsDynamic(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetLikesDynamic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetLikesDynamic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetLikesDynamic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetLikesDynamic(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetTopTenPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopTenParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetTopTenPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetTopTenPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetTopTenPosts(ctx, req.(*TopTenParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetTopTenUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopTenParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetTopTenUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts_service.StatisticService/GetTopTenUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetTopTenUsers(ctx, req.(*TopTenParameter))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticService_ServiceDesc is the grpc.ServiceDesc for StatisticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts_service.StatisticService",
	HandlerType: (*StatisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetViewsCount",
			Handler:    _StatisticService_GetViewsCount_Handler,
		},
		{
			MethodName: "GetCommentsCount",
			Handler:    _StatisticService_GetCommentsCount_Handler,
		},
		{
			MethodName: "GetLikesCount",
			Handler:    _StatisticService_GetLikesCount_Handler,
		},
		{
			MethodName: "GetViewsDynamic",
			Handler:    _StatisticService_GetViewsDynamic_Handler,
		},
		{
			MethodName: "GetCommentsDynamic",
			Handler:    _StatisticService_GetCommentsDynamic_Handler,
		},
		{
			MethodName: "GetLikesDynamic",
			Handler:    _StatisticService_GetLikesDynamic_Handler,
		},
		{
			MethodName: "GetTopTenPosts",
			Handler:    _StatisticService_GetTopTenPosts_Handler,
		},
		{
			MethodName: "GetTopTenUsers",
			Handler:    _StatisticService_GetTopTenUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/soa.proto",
}
